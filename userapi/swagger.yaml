openapi: 3.0.0
info:
  title: User API
  description: API pour la gestion des utilisateurs avec Redis
  version: 1.0.0
  contact:
    name: Louis DECOURTIS
    email: louis.decourtis@edu.ece.fr

servers:
  - url: http://localhost:3000
    description: Serveur de développement local
  - url: https://devops-userapi-2024-671a8bceceee.herokuapp.com
    description: Serveur de production Heroku

tags:
  - name: Users
    description: Opérations sur les utilisateurs
  - name: Health
    description: Vérification de l'état du service
  - name: Documentation
    description: Documentation de l'API

paths:
  /api-docs:
    get:
      tags:
        - Documentation
      summary: Documentation Swagger
      description: Interface Swagger UI pour explorer l'API
      responses:
        '200':
          description: Documentation Swagger UI
          content:
            text/html:
              schema:
                type: string

  /:
    get:
      tags:
        - Documentation
      summary: Page d'accueil
      description: Affiche les informations de base de l'API
      responses:
        '200':
          description: Informations de base
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Welcome to UserAPI"
                  environment:
                    type: string
                    example: "development"
                  redis_status:
                    type: string
                    example: "connected"
                    enum: ["connected", "disabled"]

  /health:
    get:
      tags:
        - Health
      summary: Vérifier l'état de l'API
      description: Vérifie l'état de l'API
      responses:
        '200':
          description: Service en bon état
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: "UP"
        '500':
          description: Service indisponible
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /users:
    post:
      tags:
        - Users
      summary: Créer un nouvel utilisateur
      description: Crée un nouvel utilisateur avec les informations fournies
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserInput'
      responses:
        '201':
          description: Utilisateur créé avec succès
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "User created"
                  user:
                    $ref: '#/components/schemas/User'
        '400':
          description: Données invalides
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '500':
          description: Erreur serveur
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /users/{id}:
    get:
      tags:
        - Users
      summary: Récupérer un utilisateur par son ID
      parameters:
        - name: id
          in: path
          required: true
          description: Identifiant unique de l'utilisateur
          schema:
            type: string
      responses:
        '200':
          description: Utilisateur trouvé
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '404':
          description: Utilisateur non trouvé
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '500':
          description: Erreur serveur
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

    put:
      tags:
        - Users
      summary: Mettre à jour un utilisateur
      parameters:
        - name: id
          in: path
          required: true
          description: Identifiant unique de l'utilisateur à mettre à jour
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserUpdateInput'
      responses:
        '200':
          description: Utilisateur mis à jour avec succès
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "User updated"
                  user:
                    $ref: '#/components/schemas/User'
        '400':
          description: Aucun champ à mettre à jour fourni
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '404':
          description: Utilisateur non trouvé
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '500':
          description: Erreur serveur
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

    delete:
      tags:
        - Users
      summary: Supprimer un utilisateur
      parameters:
        - name: id
          in: path
          required: true
          description: Identifiant unique de l'utilisateur à supprimer
          schema:
            type: string
      responses:
        '200':
          description: Utilisateur supprimé avec succès
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "User with id {id} deleted"
        '404':
          description: Utilisateur non trouvé
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '500':
          description: Erreur serveur
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

components:
  schemas:
    UserInput:
      type: object
      required:
        - id
        - name
        - email
      properties:
        id:
          type: string
          example: "123"
          description: Identifiant unique de l'utilisateur
        name:
          type: string
          minLength: 1
          maxLength: 50
          example: "John Doe"
        email:
          type: string
          format: email
          maxLength: 100
          example: "john@example.com"

    UserUpdateInput:
      type: object
      properties:
        name:
          type: string
          minLength: 1
          maxLength: 50
          example: "John Doe"
        email:
          type: string
          format: email
          maxLength: 100
          example: "john@example.com"

    User:
      type: object
      properties:
        id:
          type: string
          example: "123"
          description: Identifiant unique de l'utilisateur
        name:
          type: string
          example: "John Doe"
        email:
          type: string
          format: email
          example: "john@example.com"

    Error:
      type: object
      properties:
        message:
          type: string
          description: Message d'erreur
          example: "Internal server error"
